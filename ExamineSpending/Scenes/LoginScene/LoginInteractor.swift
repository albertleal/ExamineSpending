//
//  LoginInteractor.swift
//  ExamineSpending
//
//  Copyright (c) 2018 Aleksi Sitomaniemi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Alamofire

protocol LoginWorker {
  func authenticate(mode: AuthenticationMode, completion: @escaping (URL?, ESError?) -> Void)
}

protocol LoginBusinessLogic {
  func login(_ request: Login.Auth.Request)
}

protocol LoginDataStore {
  var oauthUrl: URL? { get set }
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore {
  var oauthUrl: URL?
  var presenter: LoginPresentationLogic?

  var worker: LoginWorker?

  func login(_ request: Login.Auth.Request) {
    log.verbose("")

    switch request.bank {
    case .nordea:
      let nordeaWorker = NordeaLoginWorker()
      if let code = request.code {
        let args = Args(code: code, state: "")
        nordeaWorker.loginArgs = args
      }
      worker = nordeaWorker
    case .op:
      worker = OPLoginWorker()
    }

    worker?.authenticate(mode: request.mode) { (oauthUrl, err) in
      let result: LoginResult
      if let error = err {
        result = LoginResult.failed(error)
      } else if let url = oauthUrl {
        self.oauthUrl = url
        result = LoginResult.pending
      } else {
        result = .success
      }
      self.presenter?.presentLoginResponse(response: Login.Auth.Response(result: result))
    }
  }
}
