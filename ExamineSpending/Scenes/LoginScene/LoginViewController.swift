//
//  LoginViewController.swift
//  ExamineSpending
//
//  Copyright (c) 2018 Aleksi Sitomaniemi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: class {
  func displayLoginResult(viewModel: Login.Auth.ViewModel)
}

class LoginViewController: UIViewController, LoginDisplayLogic {
  var interactor: LoginBusinessLogic?
  var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?

  @IBOutlet var spinner: UIActivityIndicatorView?
  @IBOutlet var oauthSwitch: UISwitch?

  // MARK: Object lifecycle
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }

  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }

  // MARK: Setup
  private func setup() {
    let viewController = self
    let interactor = LoginInteractor()
    let presenter = LoginPresenter()
    let router = LoginRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }

  // MARK: Routing
  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("to\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }

  // MARK: View lifecycle
  override func viewDidLoad() {
    super.viewDidLoad()
  }

  // MARK: User Interactions
  func displayLoginResult(viewModel: Login.Auth.ViewModel) {
    log.verbose("")
    spinner?.stopAnimating()
    switch viewModel.result {
    case .failed(let error):
      showErrorDialog(message: error.message())
    case .pending:
      performSegue(withIdentifier: "WebOAuth", sender: self)
    case .success:
      performSegue(withIdentifier: "Examiner", sender: self)
    case .canceled:
      log.info("User canceled authentication")
    }
  }

  @IBAction func triggerLogin(_ sender: UIButton) {
    spinner?.startAnimating()
    if let buttonText = sender.title(for: .normal) {
      //ghetto mechanism to identify bank by reading button title
      if buttonText.contains(" OP ") {
        interactor?.login(Login.Auth.Request(bank: .op, mode: .skipUI, code: nil))
      } else {
        let switchIsOn = oauthSwitch?.isOn ?? false
        let mode: AuthenticationMode = switchIsOn ? .withUI : .skipUI
        interactor?.login(Login.Auth.Request(bank: .nordea, mode: mode, code: nil))
      }
    }
  }

  private func showErrorDialog(message: String) {
    log.verbose("")
    let ac = UIAlertController.init(title: "Error", message: message, preferredStyle: .alert)
    ac.addAction(UIAlertAction.init(title: "OK", style: .default, handler: nil))
    self.present(ac, animated: true)
  }
}
