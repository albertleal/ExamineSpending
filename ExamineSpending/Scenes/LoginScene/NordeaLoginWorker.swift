//
//  NordeaLoginWorker.swift
//  ExamineSpending
//
//  Copyright (c) 2018 Aleksi Sitomaniemi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

struct GetAuthCodeResponse: Decodable {
  let args: Args
  let origin, url: String
}

struct Args: Codable {
  let code, state: String
}

class NordeaLoginWorker: LoginWorker {
  var completionHandler: ((ESError?) -> Void)?
  func authenticate(_ completion: @escaping (ESError?) -> Void) {
    log.verbose("")
    let nordeaAdapter = NordeaRequestAdapter()
    sessionManager.adapter = nordeaAdapter
    RESTRoutes.accountAPIVersion = "v2"
    RESTRoutes.urlRoot = "https://api.nordeaopenbanking.com/"

    self.completionHandler = completion
    let restRequest = RESTRoutes.authcode(clientId: nordeaAdapter.clientId)

    sessionManager.request(restRequest).validate().responseJSON(completionHandler: { restResponse in
      if restResponse.result.isSuccess {
        if let respObject = try? JSONDecoder().decode(GetAuthCodeResponse.self, from: restResponse.data!) as GetAuthCodeResponse {
          let code = respObject.args.code
          self.getTokenWithCode(code)
        } else {
          self.completionHandler?(ESError.authenticationFailure)
        }
      } else {
        self.completionHandler?(ESError.requestFailure(reason: restResponse.error!.localizedDescription))
      }
      log.debug(restResponse)
    })
  }

  private func getTokenWithCode(_ code: String) {
    let request = RESTRoutes.token(code: code)
    sessionManager.request(request).validate().responseJSON { restResponse in
      if restResponse.result.isSuccess {
        if let adapter = sessionManager.adapter as? NordeaRequestAdapter {
          adapter.auth = try? JSONDecoder().decode(Authorization.self, from: restResponse.data!)
        }
        self.completionHandler?(nil)
      } else {
        self.completionHandler?(ESError.authenticationFailure)
      }
    }
  }
}
