//
//  NordeaLoginWorker.swift
//  ExamineSpending
//
//  Copyright (c) 2018 Aleksi Sitomaniemi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

struct GetAuthCodeResponse: Decodable {
  let args: Args
  let origin, url: String
}

struct Args: Codable {
  let code, state: String
}

class NordeaLoginWorker: LoginWorker {
  var loginArgs: Args?
  var completionHandler: ((URL?, ESError?) -> Void)?

  func authenticate(mode: AuthenticationMode, completion: @escaping (URL?, ESError?) -> Void) {
    log.verbose("")
    let nordeaAdapter = NordeaRequestAdapter()
    sessionManager.adapter = nordeaAdapter
    RESTRoutes.accountAPIVersion = "v2"
    RESTRoutes.urlRoot = "https://api.nordeaopenbanking.com/"

    self.completionHandler = completion

    //If code has been set before calling authenticate (web oauth), we go directly to token fetch
    if let code = loginArgs?.code {
      self.getTokenWithCode(code)
      return
    }

    let restRequest = RESTRoutes.authcode(clientId: nordeaAdapter.clientId, scenario: mode)

    if mode == .withUI {
      self.completionHandler?(restRequest.urlRequest?.url, nil)
      return
    }

    sessionManager.request(restRequest).validate().responseString (completionHandler: { restResponse in
      if restResponse.result.isSuccess {
          if let respObject = try? JSONDecoder().decode(GetAuthCodeResponse.self, from: restResponse.data!) as GetAuthCodeResponse {
            let code = respObject.args.code
            self.getTokenWithCode(code)
          } else {
            self.completionHandler?(nil, ESError.authenticationFailure)
          }
      } else {
        self.completionHandler?(nil, ESError.requestFailure(reason: restResponse.error!.localizedDescription))
      }
      log.debug(restResponse)
    })
  }

  private func getTokenWithCode(_ code: String) {
    let request = RESTRoutes.token(code: code)
    sessionManager.request(request).validate().responseJSON { restResponse in
      if restResponse.result.isSuccess {
        if let adapter = sessionManager.adapter as? NordeaRequestAdapter {
          adapter.auth = try? JSONDecoder().decode(Authorization.self, from: restResponse.data!)
        }
        self.completionHandler?(nil, nil)
      } else {
        self.completionHandler?(nil, ESError.authenticationFailure)
      }
    }
  }
}
