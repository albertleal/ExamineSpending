//
//  TransactionViewController.swift
//  ExamineSpending
//
//  Copyright (c) 2018 Aleksi Sitomaniemi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TransactionDisplayLogic: class {
  func displayTransaction(viewModel: TransactionDetails.Fetch.ViewModel)
}

class TransactionViewController: UIViewController, TransactionDisplayLogic {
  var interactor: TransactionBusinessLogic?
  var router: (NSObjectProtocol & TransactionRoutingLogic & TransactionDataPassing)?

  var vm: TransactionDetails.Fetch.ViewModel!

  @IBOutlet weak var tableView: UITableView?
  @IBOutlet weak var amountLabel: UILabel?

  // MARK: Object lifecycle

  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }

  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }

  deinit {
    log.debug("")
  }

  // MARK: Setup
  private func setup() {
    let viewController = self
    let interactor = TransactionInteractor()
    let presenter = TransactionPresenter()
    let router = TransactionRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }

  // MARK: Routing
  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("to\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }

  // MARK: View lifecycle
  override func viewDidLoad() {
    log.verbose("")
    super.viewDidLoad()
    tableView?.dataSource = self
    tableView?.isUserInteractionEnabled = false
    tableView?.backgroundColor = .clear

    //Add gesture recognizer for dismissing the transaction view with a swipe
    let swipeRecognizer = UISwipeGestureRecognizer(target: self, action: #selector(swipeDetected(_:)))
    swipeRecognizer.direction = .down
    self.view.addGestureRecognizer(swipeRecognizer)

    interactor?.fetchDetails()
  }

  // MARK: Display logic
  func displayTransaction(viewModel: TransactionDetails.Fetch.ViewModel) {
    log.verbose("")
    vm = viewModel
    amountLabel?.text = vm.amount
    amountLabel?.shadowColor = .clear // vm.type == .credit ? creditColor : debitColor
    tableView?.reloadData()
  }

  @IBAction func handleCloseTap(_ sender: UIButton) {
    log.verbose("")
    dismiss(animated: true, completion: nil)
  }
}

extension TransactionViewController {
  @objc func swipeDetected(_ sender: UISwipeGestureRecognizer) {
    if sender.state == .ended {
      handleCloseTap(UIButton())
    }
  }
}

extension TransactionViewController: UITableViewDataSource {
  func numberOfSections(in tableView: UITableView) -> Int {
    return 1
  }

  func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
    return "Transaction Details"
  }

  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return vm.valuePairs.count
  }

  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    if let cell = tableView.dequeueReusableCell(withIdentifier: "TxnDetailCell") {
      cell.textLabel?.text = vm.valuePairs[indexPath.row].title
      cell.detailTextLabel?.text = vm.valuePairs[indexPath.row].value
      return cell
    } else {
      return UITableViewCell()
    }
  }
}
